specificationVersion: jobtemplate-2023-09
name: Maya/Arnold Tiled Render
description: |
  This job uses Maya, Arnold for Maya and ffmpeg to do tile rendering and assembly.
  Tile rendering divides an image into evenly sized regions, and assembly stitches the tiles
  together.

  This job depends on Maya, MtoA, the Maya OpenJD adaptor, and FFmpeg. If you're using a
  conda queue environment, ensure that the channels in your CondaChannels list include all
  these packages. On Deadline Cloud service-managed fleets, the two channels
  "deadline-cloud conda-forge" can provide them.

  This job bundle depends on the code in this PR: https://github.com/aws-deadline/deadline-cloud-for-maya/pull/176
  Before that change is released as a new version, you can use the approach documented in
  https://docs.aws.amazon.com/deadline-cloud/latest/developerguide/configure-jobs-s3-channel.html,
  and build the packages recipes openjd-adaptor-runtime, deadline, and maya-openjd. Modify the maya-openjd
  recipe to use the following source definition to get the changes for the above merged PR:

    source:
      git_url: https://github.com/aws-deadline/deadline-cloud-for-maya.git
      git_rev: mainline

  The default scene provided in this job bundle was generated by
  https://github.com/aws-deadline/deadline-cloud-samples/tree/mainline/job_bundles/turntable_with_maya_arnold.

  Read the blog post "Create a tile rendering job with modifications for AWS Deadline Cloud"
  at https://aws.amazon.com/blogs/media/create-a-tile-rendering-job-with-modifications-for-aws-deadline-cloud/
  to learn about how this job was created.

parameterDefinitions:

# Render Parameters
- name: MayaSceneFile
  type: PATH
  objectType: FILE
  dataFlow: IN
  userInterface:
    control: CHOOSE_INPUT_FILE
    label: Maya Scene File
    groupLabel: Maya Settings
    fileFilters:
    - label: Maya Scene Files
      patterns:
      - '*.mb'
      - '*.ma'
    - label: All Files
      patterns:
      - '*'
  description: The Maya scene file to render.
  default: sample_turntable_scene.ma
- name: Frames
  type: STRING
  userInterface:
    control: LINE_EDIT
    label: Frames
    groupLabel: Maya Settings
  description: The frames to render. E.g. 1-3,8,11-15
  default: '1-16'
  minLength: 1
- name: RenderLayer
  type: STRING
  userInterface:
    control: LINE_EDIT
    label: Render Layer
    groupLabel: Maya Settings
  description: The name of the layer to render.
  default: 'masterLayer'
- name: Camera
  type: STRING
  userInterface:
    control: LINE_EDIT
    groupLabel: Maya Settings
  description: The camera to render.
  default: persp
- name: OutputFilePrefix
  type: STRING
  userInterface:
    control: LINE_EDIT
    label: Output File Prefix
    groupLabel: Maya Settings
  description: The prefix for the output render files.
  default: output
- name: ProjectPath
  type: PATH
  objectType: DIRECTORY
  dataFlow: NONE
  userInterface:
    control: CHOOSE_DIRECTORY
    label: Project Path
    groupLabel: Maya Settings
  description: The Maya project path.
  default: .
- name: OutputFilePath
  type: PATH
  objectType: DIRECTORY
  dataFlow: OUT
  userInterface:
    control: CHOOSE_DIRECTORY
    label: Output File Path
    groupLabel: Maya Settings
  description: The render output path.
  default: output
- name: RenderSetupIncludeLights
  type: STRING
  userInterface:
    control: CHECK_BOX
    label: Include All Lights
    groupLabel: Maya Settings
  description: Include all lights in the render.
  default: 'true'
  allowedValues:
  - 'true'
  - 'false'
- name: StrictErrorChecking
  type: STRING
  userInterface:
    control: CHECK_BOX
    label: Strict Error Checking
    groupLabel: Maya Settings
  description: Fail when errors occur.
  default: 'false'
  allowedValues:
  - 'true'
  - 'false'
- name: ImageWidth
  type: INT
  userInterface:
    control: SPIN_BOX
    label: Image Width
    groupLabel: Maya Settings
  minValue: 1
  description: The image width of the output.
  default: 3840
- name: ImageHeight
  type: INT
  userInterface:
    control: SPIN_BOX
    label: Image Height
    groupLabel: Maya Settings
  minValue: 1
  description: The image height of the output.
  default: 2160

# Tile Render Parameters
- name: NumXTiles
  type: INT
  userInterface:
    control: SPIN_BOX
    label: Tiles across width
    groupLabel: Tile Rendering Settings
  minValue: 1
  description: The number of tiles across the x axis.
  default: 3
- name: NumYTiles
  type: INT
  userInterface:
    control: SPIN_BOX
    label: Tiles across height
    groupLabel: Tile Rendering Settings
  minValue: 1
  description: The number of tiles across the y axis.
  default: 2

# Arnold Renderer Settings
- name: ArnoldErrorOnLicenseFailure
  type: STRING
  userInterface:
    control: CHECK_BOX
    label: Error on License Failure
    groupLabel: Arnold Renderer Settings
  description: Whether to produce an error when there is an Arnold license failure.
  default: 'true'
  allowedValues:
  - 'true'
  - 'false'

# Software Environment
- name: CondaPackages
  type: STRING
  description: Choose which Conda packages to install for the render. Requires a conda queue environment to process the value.
  default: maya=2024 maya-mtoa maya-openjd=0.14 ffmpeg
  userInterface:
    control: LINE_EDIT
    label: Conda Packages
    groupLabel: Software Environment

steps:
- name: Render Tile Regions
  parameterSpace:
    taskParameterDefinitions:
    - name: Frame
      type: INT
      range: '{{Param.Frames}}'
    - name: TileNumberX
      type: INT
      range: '1-{{Param.NumXTiles}}'
    - name: TileNumberY
      type: INT
      range: '1-{{Param.NumYTiles}}'
  stepEnvironments:
  - name: Maya
    description: Runs Maya in the background.
    script:
      embeddedFiles:
      - name: initData
        filename: init-data.yaml
        type: TEXT
        data: |
          renderer: arnold
          render_layer: '{{Param.RenderLayer}}'
          camera: '{{Param.Camera}}'
          scene_file: '{{Param.MayaSceneFile}}'
          project_path: '{{Param.ProjectPath}}'
          output_file_path: '{{Param.OutputFilePath}}'
          render_setup_include_lights: {{Param.RenderSetupIncludeLights}}
          strict_error_checking: {{Param.StrictErrorChecking}}
          image_width: {{Param.ImageWidth}}
          image_height: {{Param.ImageHeight}}
          error_on_arnold_license_fail: {{Param.ArnoldErrorOnLicenseFailure}}
      actions:
        onEnter:
          command: maya-openjd
          args:
          - daemon
          - start
          - --path-mapping-rules
          - file://{{Session.PathMappingRulesFile}}
          - --init-data
          - file://{{Env.File.initData}}
          cancelation:
            mode: NOTIFY_THEN_TERMINATE
        onExit:
          command: maya-openjd
          args:
          - daemon
          - stop
          cancelation:
            mode: NOTIFY_THEN_TERMINATE
  script:
    embeddedFiles:
    - name: RenderTile
      filename: render-tile.py
      type: TEXT
      data: |
        import subprocess

        # Tile num uses 1 based indexing. First tile (top left) is x=1, y=1
        tileNumX = {{Task.Param.TileNumberX}}
        tileNumY = {{Task.Param.TileNumberY}}
        numXTiles = {{Param.NumXTiles}}
        numYTiles = {{Param.NumYTiles}}

        deltaX, widthRemainder = divmod({{Param.ImageWidth}}, numXTiles)
        deltaY, heightRemainder = divmod({{Param.ImageHeight}}, numYTiles)

        # Calculate the bounds for the tile. Two adjacent tiles could have
        # "minX=0, maxX=63, minY=0, maxY=63" and then "minX=64, maxX=127, minY=0, maxY=63"
        minX = deltaX * (tileNumX - 1)
        maxX = (deltaX * tileNumX) - 1
        minY = deltaY * (tileNumY - 1)
        maxY = (deltaY * tileNumY) - 1

        # Add any remainder to the last row and column
        if tileNumX == numXTiles:
            maxX += widthRemainder
        if tileNumY == numYTiles:
            maxY += heightRemainder

        prefix = r"{{Param.OutputFilePrefix}}"

        with open("run-data.yaml", "w") as fh:
            fh.write("frame: {{Task.Param.Frame}}\n")
            fh.write(f"region_min_x: {minX}\n")
            fh.write(f"region_max_x: {maxX}\n")
            fh.write(f"region_min_y: {minY}\n")
            fh.write(f"region_max_y: {maxY}\n")
            fh.write(f"output_file_prefix: '{prefix}_tile_{tileNumY}x{tileNumX}_{numYTiles}x{numXTiles}'\n")
        subprocess.check_call(["cat", "run-data.yaml"])

        subprocess.check_call(["maya-openjd", "daemon", "run", "--run-data", "file://run-data.yaml"])

    actions:
      onRun:
        command: python
        args: ["{{Task.File.RenderTile}}"]
        cancelation:
          mode: NOTIFY_THEN_TERMINATE
  hostRequirements:
    attributes:
    - name: attr.worker.os.family
      anyOf:
      - linux

- name: Assemble Tiles
  dependencies:
  - dependsOn: Render Tile Regions
    # The 2023-09 Open Job Description specification doesn't have a feature for task-level dependencies.
    # When a future version gains such a feature, this job should use it to depend only on the tiles for the frame.
    # See https://github.com/OpenJobDescription/openjd-specifications/blob/mainline/rfcs/README.md to learn about
    # the process to propose a feature like this.
    #
    # Here's a potential syntax for that:
    #    dependencies:
    #    - dependsOn: Render Tile Regions
    #      taskParameters:
    #      - name: Frame
    #        range: "{{Task.Param.Frame}}"
    #      - name: TileNumberX
    #        range: "*"
    #      - name: TileNumberY
    #        range: "*"
  parameterSpace:
    taskParameterDefinitions:
    - name: Frame
      type: INT
      range: '{{Param.Frames}}'
  script:
    actions:
      onRun:
        command: bash
        args: [ "{{Task.File.AssembleTiles}}"]
    embeddedFiles:
    - name: AssembleTiles
      type: TEXT
      data: |
        #!/bin/env bash

        set -xeuo pipefail

        # ASSUMPTIONS:
        # Output folder contains the rendered tiles directly.
        # The name.#.ext Maya "Frame/Animation ext" render setting is used.
        # Frame padding of 4
        # Output tiles are pngs. Swap png with the desired file ext in the script as needed.

        FRAME=$(printf %04d {{Task.Param.Frame}})

        ffmpeg -y \
            -pattern_type glob \
            -i "{{Param.OutputFilePath}}/{{Param.OutputFilePrefix}}_tile_*.$FRAME.png" \
            -filter_complex tile={{Param.NumXTiles}}x{{Param.NumYTiles}} \
            "{{Param.OutputFilePath}}/{{Param.OutputFilePrefix}}.$FRAME.png"
  hostRequirements:
    attributes:
    - name: attr.worker.os.family
      anyOf:
      - linux